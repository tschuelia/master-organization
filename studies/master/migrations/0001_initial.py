# Generated by Django 3.0.5 on 2020-05-01 10:14

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=100, unique=True, verbose_name='Studienteil')),
                ('min_ects_required', models.IntegerField(blank=True, null=True, verbose_name='Minimal nötige Anzahl ECTS in diesem Bereich')),
                ('max_ects_creditable', models.IntegerField(blank=True, null=True, verbose_name='Maximale Anzahl anrechenbarer ECTS')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=200, verbose_name='Titel')),
                ('credit_points', models.IntegerField(default=0, verbose_name='ECTS')),
            ],
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=30, unique=True, verbose_name='Name')),
                ('type_abbreviation', models.CharField(max_length=5, unique=True, verbose_name='Abkürzung')),
                ('min_ects_required', models.IntegerField(blank=True, null=True, verbose_name='Minimal nötige Anzahl ECTS in dieser Kategorie')),
                ('max_ects_creditable', models.IntegerField(blank=True, null=True, verbose_name='Maximale Anzahl anrechenbarer ECTS')),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(choices=[('SS', 'Sommersemester'), ('WS', 'Wintersemester')], max_length=2)),
                ('year', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization_name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('specialization_abbreviation', models.CharField(max_length=10, unique=True, verbose_name='Abkürzung')),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='Note')),
                ('included', models.BooleanField(default=True, verbose_name='In Berechnung mit einbeziehen?')),
                ('category', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='master.Category', verbose_name='Kategorie')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master.Course', verbose_name='Kurs')),
                ('semester', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='master.Semester', verbose_name='Prüfungssemester')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master.Student', verbose_name='Student')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='master.CourseType', verbose_name='Kurstyp'),
        ),
        migrations.AddField(
            model_name='course',
            name='specializations',
            field=models.ManyToManyField(blank=True, to='master.Specialization', verbose_name='Vertiefungsfächer laut Modulhandbuch'),
        ),
        migrations.AddField(
            model_name='student',
            name='major1',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='major1', to='master.Specialization', verbose_name='Vertiefungsfach 1'),
        ),
        migrations.AddField(
            model_name='student',
            name='major2',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='major2', to='master.Specialization', verbose_name='Vertiefungsfach 2'),
        ),
        migrations.AddField(
            model_name='student',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
